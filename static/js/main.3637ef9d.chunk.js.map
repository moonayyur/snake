{"version":3,"sources":["Snake.js","Food.js","Control.js","App.js","serviceWorker.js","index.js"],"names":["Snake","props","this","snakeDots","map","dot","i","className","key","style","left","top","Component","Food","FoodDots","Control","classeName","onClick","BTN","App","state","direction","speed","over","score","Math","floor","random","setInterval","moveSnake","bind","document","onkeydown","window","event","keyCode","setState","dots","head","length","headp","push","shift","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3637ef9d.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nclass Snake extends Component {\r\n    render(props) {\r\n        return (\r\n            <div>\r\n                {this.props.snakeDots.map((dot, i) => \r\n                <div \r\n                    className='snake-dot' \r\n                    key={i} \r\n                    style={{left:dot[0]*2+\"%\", top:dot[1]*2+\"%\"}}\r\n                />)}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Snake;","import React, { Component } from 'react';\r\n\r\nclass Food extends Component {\r\n    render(props) {\r\n        return (\r\n            <div>\r\n                <div\r\n                    className='snake-food'\r\n                    style={{ \r\n                        left: this.props.FoodDots[0],\r\n                        top: this.props.FoodDots[1]\r\n                    }}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Food;","import React, { Component } from 'react';\r\n\r\nclass Control extends Component {\r\n    render(props) {\r\n        return (\r\n            <button classeName='btn' onClick={this.props.onClick}>\r\n                {this.props.BTN}\r\n            </button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Control;","import './App.css';\r\nimport React, { Component } from 'react';\r\nimport Snake from './Snake'\r\nimport Food from './Food';\r\nimport Control from './Control';\r\nclass App extends Component {\r\n  state={\r\n    direction:'PAUSE',\r\n    speed:'100',\r\n    snakeDots:[\r\n      [0,0],\r\n      [1,0],\r\n      [2, 0],\r\n    ],\r\n    over:false,\r\n    score:1,\r\n    FoodDots: [Math.floor(Math.random() * 50) * 2 + \"%\", Math.floor(Math.random() * 50) * 2 + \"%\"]\r\n  }\r\n  componentDidMount(){\r\n    setInterval(this.moveSnake.bind(this),this.state.speed);\r\n    document.onkeydown=this.onkeydown.bind(this);\r\n  }\r\n  onkeydown(state,key){\r\n    key=key || window.event;\r\n    switch(key.keyCode){\r\n      case 38:\r\n        this.setState({direction:'UP'});\r\n        break;\r\n      case 40:\r\n        this.setState({ direction:'DOWN' });\r\n        break;\r\n      case 37:\r\n        this.setState({ direction:'LEFT' });\r\n        break;\r\n      case 39:\r\n        this.setState({ direction:'RIGHT' });\r\n        break;\r\n      case 27:\r\n        this.setState({ direction: 'PAUSE' });\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n  moveSnake(){\r\n    let dots=this.state.snakeDots;\r\n    let head=dots[dots.length-1];\r\n    switch(this.state.direction){\r\n      case 'RIGHT':\r\n        head=[head[0]+1,head[1]];\r\n        break;\r\n      case 'LEFT':\r\n        head = [head[0]-1, head[1]];\r\n        break;\r\n      case 'UP':\r\n        head = [head[0], head[1]-1];\r\n        break;\r\n      case 'DOWN':\r\n        head = [head[0], head[1] + 1];\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    if (head[0]===50) head[0]=0;\r\n    if (head[1] === 50) head[1] = 0;\r\n    if (head[0] === -1) head[0] = 49;\r\n    if (head[1] === -1) head[1] = 49;\r\n    let headp = false\r\n    if (head[0] * 2 + \"%\" === this.state.FoodDots[0] && head[1] * 2 + \"%\" === this.state.FoodDots[1]){\r\n      headp = true;\r\n    }\r\n    if (headp){\r\n      this.setState({FoodDots : [Math.floor(Math.random() * 50) * 2 + \"%\", Math.floor(Math.random() * 50) * 2 + \"%\"]});\r\n      this.setState({score: this.state.score+1});\r\n      this.setState({ speed: this.state.speed - 1 });\r\n    }\r\n    if (this.state.direction!=='PAUSE'){\r\n      dots.map(dot => {\r\n        if (dot[0] === head[0] && dot[1] === head[1]) this.setState({over:true});\r\n        return true;\r\n      })\r\n      dots.push(head);\r\n      if (!headp) dots.shift();\r\n      this.setState({ snakeDots: dots });\r\n    } \r\n  }\r\n  render() {\r\n          if (!this.state.over) {\r\n            return (\r\n              <div>\r\n                <h1>Score : {this.state.score}</h1>\r\n                <div className='App'>\r\n                  <Snake snakeDots={this.state.snakeDots} />\r\n                  <Food FoodDots={this.state.FoodDots} />\r\n                </div>\r\n                <Control BTN='UP' onClick={() => this.setState({ direction: 'UP' })}/>\r\n                <br/>\r\n                <Control BTN='LEFT' onClick={() => this.setState({ direction: 'LEFT' })} />\r\n                <Control BTN='RIGHT' onClick={() => this.setState({ direction: 'RIGHT' })} />\r\n                <br />\r\n                <Control BTN='DOWN' onClick={() => this.setState({ direction: 'DOWN' })} />\r\n              </div>\r\n            );\r\n          }\r\n          else {\r\n            return (\r\n              <div className='App'>\r\n                <h1>GAME OVER</h1>\r\n                <h1>Your Score is : {this.state.score}</h1>\r\n              </div>\r\n            );\r\n            \r\n          }\r\n        }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}